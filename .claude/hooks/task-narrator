#!/bin/bash

# Task Narrator hook for Claude Code
# Claude Code のタスク実行を音声で通知するフック

set -e

# 音声出力の設定
VOICE_ENABLED=${CLAUDE_VOICE_ENABLED:-false}
VOICE_LANG=${CLAUDE_VOICE_LANG:-"ja-JP"}
VOICE_RATE=${CLAUDE_VOICE_RATE:-1.0}
VOICE_VOLUME=${CLAUDE_VOICE_VOLUME:-0.7}

# 音声出力関数
speak() {
    local message="$1"
    local priority="${2:-normal}"  # low, normal, high
    
    if [ "$VOICE_ENABLED" != "true" ]; then
        return 0
    fi
    
    # 優先度による音量調整
    local volume="$VOICE_VOLUME"
    case "$priority" in
        "low") volume=$(echo "$VOICE_VOLUME * 0.6" | bc -l 2>/dev/null || echo "$VOICE_VOLUME") ;;
        "high") volume=$(echo "$VOICE_VOLUME * 1.2" | bc -l 2>/dev/null || echo "$VOICE_VOLUME") ;;
    esac
    
    # プラットフォーム別音声出力
    if command -v say &> /dev/null; then
        # macOS
        say -v "Kyoko" -r "$(echo "$VOICE_RATE * 200" | bc -l 2>/dev/null || echo "200")" "$message" &
    elif command -v espeak &> /dev/null; then
        # Linux (espeak)
        espeak -s "$(echo "$VOICE_RATE * 150" | bc -l 2>/dev/null || echo "150")" -a "$(echo "$volume * 100" | bc -l 2>/dev/null || echo "70")" -v "$VOICE_LANG" "$message" &
    elif command -v spd-say &> /dev/null; then
        # Linux (speech-dispatcher)
        spd-say -r "$(echo "$VOICE_RATE * 100 - 100" | bc -l 2>/dev/null || echo "0")" -i "$(echo "$volume * 100" | bc -l 2>/dev/null || echo "70")" "$message" &
    elif command -v powershell &> /dev/null; then
        # Windows (PowerShell)
        powershell -Command "Add-Type -AssemblyName System.Speech; \$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer; \$speak.Rate = $VOICE_RATE; \$speak.Volume = $(echo "$volume * 100" | bc -l 2>/dev/null || echo "70"); \$speak.SpeakAsync('$message')" &
    else
        # フォールバック: ベル音
        echo -e "\a" # システムベル
    fi
}

# タスク開始通知
task_start() {
    local task_name="$1"
    local task_type="${2:-task}"
    
    echo "🎙️  Task narrator: Starting $task_type"
    
    case "$task_type" in
        "commit")
            speak "コミット処理を開始します" "normal"
            ;;
        "push")
            speak "プッシュ処理を開始します" "normal"
            ;;
        "merge")
            speak "マージ処理を開始します" "normal"
            ;;
        "checkout")
            speak "ブランチを切り替えます" "normal"
            ;;
        "deploy")
            speak "デプロイを開始します" "high"
            ;;
        "test")
            speak "テストを実行します" "normal"
            ;;
        "build")
            speak "ビルドを開始します" "normal"
            ;;
        *)
            speak "タスクを開始します" "low"
            ;;
    esac
}

# タスク完了通知
task_complete() {
    local task_type="${1:-task}"
    local status="${2:-success}"  # success, error, warning
    
    echo "🎙️  Task narrator: $task_type completed with status: $status"
    
    case "$status" in
        "success")
            case "$task_type" in
                "commit")
                    speak "コミットが完了しました" "normal"
                    ;;
                "push")
                    speak "プッシュが完了しました" "normal"
                    ;;
                "merge")
                    speak "マージが完了しました" "normal"
                    ;;
                "deploy")
                    speak "デプロイが正常に完了しました" "high"
                    ;;
                "test")
                    speak "全てのテストが成功しました" "normal"
                    ;;
                "build")
                    speak "ビルドが成功しました" "normal"
                    ;;
                *)
                    speak "タスクが完了しました" "low"
                    ;;
            esac
            ;;
        "error")
            case "$task_type" in
                "commit")
                    speak "コミットでエラーが発生しました" "high"
                    ;;
                "push")
                    speak "プッシュでエラーが発生しました" "high"
                    ;;
                "deploy")
                    speak "デプロイでエラーが発生しました。確認してください" "high"
                    ;;
                "test")
                    speak "テストが失敗しました" "high"
                    ;;
                "build")
                    speak "ビルドが失敗しました" "high"
                    ;;
                *)
                    speak "エラーが発生しました" "high"
                    ;;
            esac
            ;;
        "warning")
            speak "警告があります。確認してください" "normal"
            ;;
    esac
}

# プログレス通知
task_progress() {
    local step="$1"
    local total="${2:-}"
    local description="${3:-}"
    
    if [ -n "$total" ]; then
        echo "🎙️  Progress: $step/$total - $description"
        if [ "$step" = "1" ]; then
            speak "処理を開始します" "low"
        elif [ "$step" = "$total" ]; then
            speak "最終ステップです" "low"
        fi
    else
        echo "🎙️  Step: $description"
        case "$description" in
            *"テスト"*)
                speak "テスト中" "low"
                ;;
            *"ビルド"*)
                speak "ビルド中" "low"
                ;;
            *"チェック"*)
                speak "チェック中" "low"
                ;;
        esac
    fi
}

# 使用方法表示
show_usage() {
    cat << EOF
Task Narrator - Claude Code 音声通知フック

使用方法:
  task_start <task_name> [task_type]     # タスク開始通知
  task_complete [task_type] [status]     # タスク完了通知  
  task_progress <step> [total] [desc]    # プログレス通知

設定 (環境変数):
  CLAUDE_VOICE_ENABLED=true             # 音声を有効にする
  CLAUDE_VOICE_LANG=ja-JP               # 音声言語
  CLAUDE_VOICE_RATE=1.0                 # 話速 (0.5-2.0)
  CLAUDE_VOICE_VOLUME=0.7               # 音量 (0.0-1.0)

例:
  source .claude/hooks/task-narrator
  task_start "コミット処理" "commit"
  task_progress "1" "3" "型チェック実行中"
  task_complete "commit" "success"

サポートプラットフォーム:
  - macOS (say コマンド)
  - Linux (espeak または spd-say)
  - Windows (PowerShell)
EOF
}

# メイン処理（直接実行された場合）
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    case "${1:-help}" in
        "start")
            task_start "$2" "$3"
            ;;
        "complete")
            task_complete "$2" "$3"
            ;;
        "progress")
            task_progress "$2" "$3" "$4"
            ;;
        "help"|*)
            show_usage
            ;;
    esac
fi